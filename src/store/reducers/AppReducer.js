import {FULFILLED, PENDING, REJECTED} from '../utils/constants';
import * as types from '../types/index';
import createReducer from '../utils/createReducer';
const initialState = {
  loading: false,
  error: null,
  loaded: false,
  languages: [],
  voices: [],
  genres: [],
  playlists: [],
  player: {type: '', pausePlayer: () => {}},
  translationFormData: {
    tuning: {rate: '100%', pitch: '20%', volume: '12dB'},
    language: 1,
    voice: 'Kimberly',
    bgm: 4,
  },
  documents: [],
  selectedDocumentForPlayer: {
    playlistIndex: -1,
    audioIndex: -1,
  }, //Index of playlists[] and playlists.sounds[]
};

const loginReducer = createReducer(initialState)({
  [types.LANGUAGES + PENDING]: state => ({
    ...state,
    errorLanguages: null,
    loadingLanguages: true,
    loadedLanguages: false,
  }),
  [types.LANGUAGES + FULFILLED]: (state, {payload}) => ({
    ...state,
    languages: payload.languages,
    loadingLanguages: false,
    loadedLanguages: true,
    errorLanguages: null,
  }),
  [types.LANGUAGES + REJECTED]: (state, {error}) => ({
    ...state,
    errorLanguages: error,
    loadingLanguages: false,
    loadedLanguages: false,
  }),
  [types.ADD_DOCUMENT + PENDING]: state => ({
    ...state,
    errorAddDoc: null,
    loadingAddDoc: true,
    loadedAddDoc: false,
  }),
  [types.ADD_DOCUMENT + FULFILLED]: (state, {payload}) => ({
    ...state,
    documents: payload.documents,
    loadingAddDoc: false,
    loadedAddDoc: true,
    errorAddDoc: null,
  }),
  [types.ADD_DOCUMENT + REJECTED]: (state, {error}) => ({
    ...state,
    errorAddDoc: error,
    loadingAddDoc: false,
    loadedAddDoc: false,
  }),
  [types.CREATE_PLAYLIST + PENDING]: state => ({
    ...state,
    errorCreatePlaylist: null,
    loadingCreatePlaylist: true,
    loadedCreatePlaylist: false,
  }),
  [types.CREATE_PLAYLIST + FULFILLED]: (state, {payload}) => ({
    ...state,
    playlists: payload.playlists,
    loadingCreatePlaylist: false,
    loadedCreatePlaylist: true,
    errorCreatePlaylist: null,
  }),
  [types.CREATE_PLAYLIST + REJECTED]: (state, {error}) => ({
    ...state,
    errorCreatePlaylist: error,
    loadingCreatePlaylist: false,
    loadedCreatePlaylist: false,
  }),
  [types.UPLOAD_DOCUMENT + PENDING]: state => ({
    ...state,
    errorUploadDoc: null,
    loadingUploadDoc: true,
    loadedUploadDoc: false,
  }),
  [types.UPLOAD_DOCUMENT + FULFILLED]: (state, {payload}) => ({
    ...state,
    uploadedDocument: payload.uploadedDocument,
    loadingUploadDoc: false,
    loadedUploadDoc: true,
    errorUploadDoc: null,
  }),
  [types.UPLOAD_DOCUMENT + REJECTED]: (state, {error}) => ({
    ...state,
    errorUploadDoc: error,
    loadingUploadDoc: false,
    loadedUploadDoc: false,
  }),
  [types.TRANSLATE_DOCUMENT + PENDING]: state => ({
    ...state,
    errorTranslateDoc: null,
    loadingTranslateDoc: true,
    loadedTranslateDoc: false,
  }),
  [types.TRANSLATE_DOCUMENT + FULFILLED]: (state, {payload}) => ({
    ...state,
    playlists: payload.playlists,
    loadingTranslateDoc: false,
    loadedTranslateDoc: true,
    errorTranslateDoc: null,
  }),
  [types.TRANSLATE_DOCUMENT + REJECTED]: (state, {error}) => ({
    ...state,
    errorTranslateDoc: error,
    loadingTranslateDoc: false,
    loadedTranslateDoc: false,
  }),
  [types.EDIT_DOCUMENT + PENDING]: state => ({
    ...state,
    errorEditDoc: null,
    loadingEditDoc: true,
    loadedEditDoc: false,
  }),
  [types.EDIT_DOCUMENT + FULFILLED]: (state, {payload}) => ({
    ...state,
    documents: payload.documents,
    loadingEditDoc: false,
    loadedEditDoc: true,
    errorEditDoc: null,
  }),
  [types.EDIT_DOCUMENT + REJECTED]: (state, {error}) => ({
    ...state,
    errorEditDoc: error,
    loadingEditDoc: false,
    loadedEditDoc: false,
  }),
  [types.GET_USER_DOCUMENT + PENDING]: state => ({
    ...state,
    errorGetDocDoc: null,
    loadingGetUserDoc: true,
    loadedGetDocDoc: false,
  }),
  [types.GET_USER_DOCUMENT + FULFILLED]: (state, {payload}) => ({
    ...state,
    documents: payload.documents,
    loadingGetUserDoc: false,
    loadedGetDocDoc: true,
    errorGetDocDoc: null,
  }),
  [types.GET_USER_DOCUMENT + REJECTED]: (state, {error}) => ({
    ...state,
    errorGetDocDoc: error,
    loadingGetUserDoc: false,
    loadedGetDocDoc: false,
  }),
  [types.DEL_DOCUMENT + PENDING]: state => ({
    ...state,
    errorDelDoc: null,
    loadingDelDoc: true,
    loadedDelDoc: false,
  }),
  [types.DEL_DOCUMENT + FULFILLED]: (state, {payload}) => ({
    ...state,
    documents: payload.documents,
    loadingDelDoc: false,
    loadedDelDoc: true,
    errorDelDoc: null,
  }),
  [types.DEL_DOCUMENT + REJECTED]: (state, {error}) => ({
    ...state,
    errorDelDoc: error,
    loadingDelDoc: false,
    loadedDelDoc: false,
  }),
  [types.GET_ALL_VOICES + PENDING]: state => ({
    ...state,
    errorGetVoices: null,
    loadingGetVoices: true,
    loadedGetVoices: false,
  }),
  [types.GET_ALL_VOICES + FULFILLED]: (state, {payload}) => ({
    ...state,
    voices: payload.voices,
    loadingGetVoices: false,
    loadedGetVoices: true,
    errorGetVoices: null,
  }),
  [types.GET_ALL_VOICES + REJECTED]: (state, {error}) => ({
    ...state,
    errorGetVoices: error,
    loadingGetVoices: false,
    loadedGetVoices: false,
  }),
  [types.GET_USER_PLAYLISTS + PENDING]: state => ({
    ...state,
    errorGetPlaylists: null,
    loadingGetPlaylists: true,
    loadedGetPlaylists: false,
  }),
  [types.GET_USER_PLAYLISTS + FULFILLED]: (state, {payload}) => ({
    ...state,
    playlists: payload.playlists,
    loadingGetPlaylists: false,
    loadedGetPlaylists: true,
    errorGetPlaylists: null,
  }),
  [types.GET_USER_PLAYLISTS + REJECTED]: (state, {error}) => ({
    ...state,
    errorGetPlaylists: error,
    loadingGetPlaylists: false,
    loadedGetPlaylists: false,
  }),
  [types.GET_ALL_GENRES + PENDING]: state => ({
    ...state,
    errorGetGenres: null,
    loadingGetGenres: true,
    loadedGetGenres: false,
  }),
  [types.GET_ALL_GENRES + FULFILLED]: (state, {payload}) => ({
    ...state,
    genres: payload.genres,
    loadingGetGenres: false,
    loadedGetGenres: true,
    errorGetGenres: null,
  }),
  [types.GET_ALL_GENRES + REJECTED]: (state, {error}) => ({
    ...state,
    errorGetGenres: error,
    loadingGetGenres: false,
    loadedGetGenres: false,
  }),
  [types.TRANSLATION_FORM_DATA]: (state, {payload}) => ({
    ...state,
    translationFormData: payload.data,
  }),
  [types.SET_PLAYER_OBJECT]: (state, {payload}) => ({
    ...state,
    player: payload.player,
  }),
  [types.SET_DOC_FOR_PLAYER]: (state, {payload}) => ({
    ...state,
    selectedDocumentForPlayer: payload.selectedDocumentForPlayer,
  }),
});

export default loginReducer;
